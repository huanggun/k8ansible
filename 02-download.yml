# 1. k8s 组件下载安装
# 2. 容器运行时配置(Container Runtime)
# 3. CNI 组件下载安装
---
-   hosts: k8s_cp_hosts
    become: true
    tasks:
    # 控制平面组件下载安装
    -   name: install control plane components
        ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: /usr/local/bin/{{ item.file }}
            mode: a+x
            checksum: "{{ item.checksum }}"
        loop: "{{ k8s_releases.control_plane }}"

-   hosts: k8s_etcd_hosts
    become: true
    tasks:
    # etcd 组件下载安装
    -   name: install etcd components
        ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: /usr/local/bin/{{ item.file }}
            mode: a+x
            checksum: "{{ item.checksum }}"
        loop: "{{ k8s_releases.etcd }}"

-   hosts: k8s_hosts
    become: true
    tasks:
    # Node 组件下载安装
    -   name: install node components
        ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: /usr/local/bin/{{ item.file }}
            mode: a+x
            checksum: "{{ item.checksum }}"
        loop: "{{ k8s_releases.node }}"

    # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
    # Container Runtimes: Forwarding IPv4 and letting iptables see bridged traffic
    -   name: /etc/modules-load.d/k8s.conf
        ansible.builtin.copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
                overlay
                br_netfilter
        notify: reload modules
    -   meta: flush_handlers
    -   name: /etc/sysctl.d/k8s.conf
        ansible.builtin.copy:
            dest: /etc/sysctl.d/k8s.conf
            content: |
                net.bridge.bridge-nf-call-iptables  = 1
                net.bridge.bridge-nf-call-ip6tables = 1
                net.ipv4.ip_forward                 = 1
                # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/dual-stack-support/#before-you-begin
                net.ipv6.conf.all.forwarding        = 1
        notify: reload sysctl cri
    -   meta: flush_handlers

    # https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md
    # crictl 配置
    -   name: /etc/crictl.yaml
        ansible.builtin.copy:
            dest: /etc/crictl.yaml
            content: |
                runtime-endpoint: unix:///run/containerd/containerd.sock
                image-endpoint: unix:///run/containerd/containerd.sock
                timeout: 10
                debug: false
                pull-image-on-create: false

    # https://download.docker.com/linux/centos/docker-ce.repo
    # CRI: containerd
    # containerd 安装 & 配置
    -   name: docker-ce yum repository
        ansible.builtin.yum_repository:
            name: docker-ce
            description: Docker CE Stable - $basearch
            enabled: true
            gpgcheck: true
            baseurl: "{{ k8s_releases.docker_ce_repo_url }}/linux/centos/$releasever/$basearch/stable"
            gpgkey: "{{ k8s_releases.docker_ce_repo_url }}/linux/centos/gpg"
    -   name: install containerd
        ansible.builtin.yum:
            name: "{{ k8s_releases.cri.yum_name }}"
    -   name: systemctl enable --now containerd
        ansible.builtin.service:
            name: containerd
            state: started
            enabled: true
    -   name: containerd directories
        ansible.builtin.file:
            path: "{{ item }}"
            state: directory
        loop:
        -   /opt/bin
        -   /opt/cni
        -   /opt/cni/bin
        -   /etc/cni
        -   /etc/cni/net.d
        -   /etc/containerd
        -   /etc/containerd/certs.d
        -   /etc/containerd/certs.d/docker.io
        -   /etc/containerd/certs.d/quay.io
        -   /etc/containerd/certs.d/k8s.gcr.io
    -   name: /etc/containerd/config.toml
        ansible.builtin.template:
            dest: /etc/containerd/config.toml
            src: templates/etc-containerd-config.toml.j2
        notify: reload containerd
    -   meta: flush_handlers

    # https://github.com/containerd/containerd/blob/main/docs/hosts.md#cri
    # https://github.com/containerd/containerd/blob/main/docs/hosts.md#registry-configuration---examples
    # 仓库 & 镜像仓库 配置
    -   name: "crictl mirror: docker.io"
        ansible.builtin.copy:
            dest: /etc/containerd/certs.d/docker.io/hosts.toml
            content: |
                server = "https://docker.io"

                [host."{{ k8s_image.containerd.mirror_host }}"]
                  capabilities = ["pull", "resolve"]
                  skip_verify = {{ k8s_image.containerd.skip_verify }}
        when: k8s_image.containerd.mirror_host != ""
    -   name: "crictl mirror: quay.io"
        ansible.builtin.copy:
            dest: /etc/containerd/certs.d/quay.io/hosts.toml
            content: |
                server = "https://quay.io"

                [host."{{ k8s_image.containerd.mirror_host }}"]
                  capabilities = ["pull", "resolve"]
                  skip_verify = {{ k8s_image.containerd.skip_verify }}
        when: k8s_image.containerd.mirror_host != ""
    -   name: "crictl mirror: k8s.gcr.io"
        ansible.builtin.copy:
            dest: /etc/containerd/certs.d/k8s.gcr.io/hosts.toml
            content: |
                server = "https://k8s.gcr.io"

                [host."{{ k8s_image.containerd.wall_mirror_host }}"]
                  capabilities = ["pull", "resolve"]
                  skip_verify = {{ k8s_image.containerd.skip_verify }}
        when: k8s_image.containerd.wall_mirror_host != ""

    # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#k8s-install-2
    # CNI 组件下载安装
    -   name: get cni plugins
        ansible.builtin.get_url:
            url: "{{ k8s_networking.cni_plugins_url }}"
            dest: "{{ k8s.dir }}/kubeadm/cni.tgz"
            checksum: "{{ version.cni_plugins_checksum }}"
    -   name: install cni plugins
        ansible.builtin.unarchive:
            src: "{{ k8s.dir }}/kubeadm/cni.tgz"
            dest: /opt/cni/bin
            remote_src: yes

    # https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#installation
    # For specific information about how a Container Runtime manages the CNI plugins
    #   https://github.com/containerd/containerd/blob/main/script/setup/install-cni
    #   https://github.com/cri-o/cri-o/blob/main/contrib/cni/README.md

    handlers:
    -   listen: reload modules
        command: modprobe overlay
    -   listen: reload modules
        command: modprobe br_netfilter
    -   listen: reload sysctl cri
        command: sysctl --system

    -   name: reload containerd
        ansible.builtin.service:
            name: containerd
            state: restarted
